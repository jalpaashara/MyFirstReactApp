{"version":3,"sources":["aloo.jpg","idli.jpg","chole.jpg","Navbar.js","foodlist.js","Main.js","Header.js","Footer.js","Home.js","Food.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_KEY","process","Navbar","props","_isMounted","state","error","isLoaded","news","this","getNewsHeadlines","setState","fetch","then","res","json","data","articles","catch","intervalID","setTimeout","bind","clearTimeout","message","className","to","activeClassName","href","target","rel","map","item","key","title","React","Component","foodinfo","id","date","summary","description","img","require","Main","foodlist","console","log","listItems","d","Header","Footer","Home","Food","finalItems","itemsList","match","params","foodid","src","alt","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c05690a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/aloo.a28ab548.jpg\";","module.exports = __webpack_public_path__ + \"static/media/idli.1bb710bc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/chole.a5f3bdc2.jpg\";","import React from 'react';\r\nimport './App.css'\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst API_KEY =`${process.env.REACT_APP_NEWS_API_KEY}`;\r\n\r\nclass Navbar extends React.Component{\r\n    _isMounted = false;\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state= {\r\n            error: null,\r\n            isLoaded: true,\r\n            news: []\r\n        };\r\n    }\r\n\r\n     /*async componentDidMount() {\r\n         this._isMounted = true;\r\n         try {\r\n             setInterval(async () => {\r\n                     await fetch('https://newsapi.org/v2/top-headlines?sources=google-news&apiKey=443f59f54e30441f87dc15b2733eef53')\r\n                         .then(res => res.json())\r\n                         .then(\r\n                             (data) => {\r\n                                 if (this._isMounted) {this.setState({isLoaded: true, news: data.articles})}\r\n                                 // console.log(\"data\", this.state);\r\n                             }\r\n                         )\r\n                         .catch((error) => {\r\n                             this.setState({\r\n                                 isLoaded: false,\r\n                                 error\r\n                             });\r\n                         })\r\n                 },\r\n                 5000\r\n             );\r\n         } catch(e) {\r\n             console.log(e);\r\n         }\r\n     }\r\n\r\n    async componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }*/\r\n\r\n    async componentDidMount() {\r\n        await this.getNewsHeadlines()\r\n    }\r\n\r\n    getNewsHeadlines() {\r\n        this.setState({isLoaded: true}, () => {\r\n            fetch('https://newsapi.org/v2/top-headlines?sources=google-news&apiKey='+API_KEY)\r\n                .then(res => res.json())\r\n                .then(\r\n                    (data) => {\r\n                        this.setState({isLoaded: true, news: data.articles})\r\n                        // console.log(\"data\", this.state);\r\n                    }\r\n                )\r\n                .catch((error) => {\r\n                    this.setState({\r\n                        isLoaded: false,\r\n                        error\r\n                    });\r\n                })\r\n        })\r\n        this.intervalID = setTimeout(this.getNewsHeadlines.bind(this),5000);\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    clearTimeout(this.intervalID);\r\n    }\r\n\r\n    render() {\r\n        //console.log('this.state.data', this.state.news);\r\n        const { error, isLoaded, news } = this.state;\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        }\r\n        if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        }\r\n\r\n        return (\r\n            <nav className=\"navStyle\">\r\n                <NavLink to=\"/\" activeClassName=\"active\"> Home </NavLink>\r\n                <br/><br/>\r\n                Courtesy: <a href={\"https://news.google.com/\"} target=\"_blank\" rel=\"noopener noreferrer\"> Google News </a>\r\n                <ul>\r\n                    {news && news.map(item => (\r\n                        <li key={item.title}>\r\n                            {item.title}\r\n                        </li>\r\n                    ))}\r\n\r\n                </ul>\r\n            </nav>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Navbar;\r\n","const foodinfo = [\r\n    {\r\n        id:1,\r\n        title: \"Aloo Chaat: Potato Lover's Delight\",\r\n        date: \"Nov 20, 2019\",\r\n        summary: \"This legendary Indian street food snack is loved by people across the country and have a variety of kinds as well.\",\r\n        description: \"These fried potato patties, laden with mind-bursting spices, green peas, and onions, are bite-sized nuggets of joy. \" +\r\n            \"This crunch potato joy served with cool curd and garnished with the fruit of Pomegranate, Bhel & Coriander is a whole meal in itself. \" +\r\n            \"Don't ever compare it with McDonaldâ€™s Aloo Tikki burger. JUST DON'T!\",\r\n        img: require('./aloo.jpg')\r\n    },\r\n    {\r\n        id:2,\r\n        title: \"Idli-Vada-Dosa-Sambhar: South Indian Delight\",\r\n        date: \"Nov 21, 2019\",\r\n        summary: \"These are the most favorite and famous South Indian dishes.\",\r\n        description: \"These are the most favorite and famous South Indian dishes. A common breakfast item and served with a combination of. Sambhar which tastes so good with Idlis, Vadas & Dosas is made with tamarind and pigeon peas. \" +\r\n            \"This is the best food in the streets of Chennai, Tamil Nadu, etc. Idlis are steamed rice cakes, Vadas are spicy savory doughnuts & Dosas are savory, south Indian pancakes made from rice batter and black lentils.\",\r\n        img: require('./idli.jpg')\r\n    },\r\n    {\r\n        id:3,\r\n        title: \"Chole Bhature: Punjab's Delight\",\r\n        date: \"Nov 22, 2019\",\r\n        summary: \"These are the most favorite and famous South Indian dishes.\",\r\n        description: \"A Punjabi classic! If its bread and butter in English then this is our desi twist to it. They taste best when served hot, and are yummy and filing. You need an appetite to do justice to the dish. \" +\r\n            \"It is a staple breakfast in the majority of Punjabi Households. Mouthwatering green peas cooked in traditional Punjabi spices and curry along with fried bread is enough to salivate your taste buds. \" +\r\n            \"If you wish to get the taste of real Punjab then take a trip through narrow colorful streets of Amritsar and order a plate of this bombastic combination of Chhole Bhature.\",\r\n        img: require('./chole.jpg')\r\n    }\r\n];\r\n\r\nexport default foodinfo;\r\n","import React from 'react';\r\nimport  './App.css'\r\nimport {Link} from \"react-router-dom\";\r\nimport foodinfo from './foodlist';\r\n\r\nclass Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            foodlist: foodinfo\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.foodlist);\r\n        const listItems = this.state.foodlist.map((d) =>\r\n            <div key={d.id} className=\"divMain\">\r\n                <h1 key='10'><Link to={`/${d.id}`}>{d.title}</Link></h1>\r\n                <p key='11'>Date: {d.date}</p>\r\n                <p key='12'>Summary: {d.summary}</p>\r\n                <br/>\r\n            </div>\r\n        );\r\n        return (\r\n            <main>\r\n                {listItems}\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport './App.css'\r\nclass Header extends React.Component{\r\n    render() {\r\n        return(\r\n            <header className=\"header-style\">\r\n                <h1 className=\"header-font\">Best Of Indian Street Food</h1>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './App.css'\r\nclass Footer extends React.Component{\r\n    render() {\r\n        return(\r\n            <footer>\r\n                Copyright Â© Jalpa Ashara\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Nav from \"./Navbar\";\r\nimport Main from \"./Main\";\r\nimport Header from \"./Header.js\"\r\nimport Footer from \"./Footer.js\";\r\n\r\nclass Home extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"main_container\">\r\n                <Header />\r\n                <div className=\"maincontent\">\r\n                    <Main />\r\n                    <Nav />\r\n                </div>\r\n                <Footer />\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport Main from \"./Main\";\r\nimport Header from \"./Header\";\r\nimport Nav from \"./Navbar\";\r\nimport Footer from \"./Footer\";\r\nimport \"./App.css\"\r\n\r\nclass Food extends Main {\r\n\r\n    render() {\r\n        let finalItems = null;\r\n        const itemsList = this.state.foodlist;\r\n        console.log('items',itemsList);\r\n        let key = this.props.match.params.foodid;\r\n\r\n        itemsList.map((item) =>{\r\n            if (key == item.id){\r\n                finalItems = (\r\n                    <div key={item.id} className=\"divMain\">\r\n                        <h1 key='10'>{item.title}</h1>\r\n                        <p key='11'>Date: {item.date}</p>\r\n                        <p key='12' className=\"desc\">{item.description}</p>\r\n                        <img src={item.img} alt='' />\r\n                        <br/><br/>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return finalItems;\r\n        });\r\n\r\n        console.log(finalItems);\r\n\r\n        return (\r\n            <main>\r\n                <div className=\"main_container\">\r\n                    <Header />\r\n                    <div className=\"maincontent\">\r\n                        {finalItems}\r\n                        <Nav />\r\n                    </div>\r\n                    <Footer />\r\n                </div>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\n/*const Food = (props) =>{\r\n    console.log('id',props.match.params.foodid);\r\n    return(\r\n        <main>\r\n            <h1>{props.match.params.foodid}</h1>\r\n        </main>\r\n    )\r\n}*/\r\nexport default Food;\r\n","import React from 'react';\nimport './App.css';\nimport Home from \"./Home\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Food from \"./Food\";\n\nclass App extends React.Component{\n  render(){\n    return(\n        <Router basename=\"/\">\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/:foodid\" component={Food}/>\n          </Switch>\n        </Router>\n    );\n  }\n}\n\n/*\nconst Car =  ({name}) => <h2>Hi, I am a {name} Car!</h2>\n\nclass App extends React.Component {\n  render() {\n    return (\n        <div>\n          <Car name=\"Ford\"></Car>\n          <Car name=\"Chevy\"></Car>\n        </div>)\n\n  }\n}\n*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<Main />, document.getElementById('nav'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}